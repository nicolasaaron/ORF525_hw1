alpha= solve(myRBF.kernel+ lambda * ident.N)
hat_beta = alpha %*% Y_train
X_test = data.matrix(test_data[,5:22])
Y_test = test_data[,4]
N_test = nrow(X_test)
dd_test = matrix( diag( tcrossprod(X_test) ), N_test, N)
dd_train = t( matrix( dd, N, N_test) )
kk_test = tcrossprod(X_test, X_train)
dim(kk_test)
dim(dd_test)
dim(dd_train)
k_star =  exp( - gamma * ( - 2 * kk_test + dd_test + dd_train))
dim(k_star)
pred = k_star %*% hat_beta
mean((pred - Y_test)^2)
SS.total =  sum((Y_test - mean(Y_test))^2)
SS.residual = sum( (Y_test - pred)^2 )
1- SS.residual / SS.total
setwd("D:/Princeton_3rd/teaching_ORF525/hw/hw1/hw1_solution/code")
filename <- 'train.data.csv'
train_data <- read.csv(filename, header=TRUE)
filename <- 'test.data.csv'
test_data <- read.csv(filename, header=TRUE)
str(train_data)
train_data$zipcode <- as.factor(train_data$zipcode)
test_data$zipcode <- as.factor(test_data$zipcode)
debug_flag = TRUE
require(CVST)
debug_flag = TRUE
Y = train_data$price
X = data.matrix(train_data[,5:22])
if (debug_flag) {
set.seed(0)
idx = sample(1:nrow(X), size= 3000)
idx = 1:3000
}else idx = 1:nrow(X)
data_cvst_train = constructData(X[idx,], Y[idx])
dim(data_cvst_train$x)
gamma = 1/4
lambda = 0.1
krr = constructKRRLearner()
params = list(kernel="rbfdot", sigma=gamma, lambda=lambda)
reg_model = krr$learn(data_cvst_train, params)
X_test = data.matrix(test_data[,5:22])
Y_test = test_data$price
data_cvst_test =constructData(X_test, Y_test)
pred = krr$predict(reg_model, data_cvst_test)
mean((pred - data_cvst_test$y)^2)
SS.total =  sum((Y_test - mean(Y_test))^2)
SS.residual = sum( (Y_test - pred)^2 )
1- SS.residual / SS.total
debug_flag=TRUE
if (debug_flag) {
#idx = sample(1:nrow(train_data), size= 1000)
idx = 1:3000
}else idx = 1:nrow(train_data)
X_train = data.matrix(train_data[idx, 5:22])
Y_train = train_data[idx, 4]
N <- nrow(X_train)
kk <- tcrossprod(X_train)
dd <- diag(kk)
ident.N <- diag(rep(1,N))
dim(kk)
gamma = 1/4
myRBF.kernel <- exp(gamma*(-matrix(dd,N,N)-t(matrix(dd,N,N))+2*kk))
dim(myRBF.kernel)
lambda =0.1
alpha= solve(myRBF.kernel+ lambda * ident.N)
hat_beta = alpha %*% Y_train
X_test = data.matrix(test_data[,5:22])
Y_test = test_data[,4]
N_test = nrow(X_test)
dd_test = matrix( diag( tcrossprod(X_test) ), N_test, N)
dd_train = t( matrix( dd, N, N_test) )
kk_test = tcrossprod(X_test, X_train)
dim(kk_test)
dim(dd_test)
dim(dd_train)
k_star =  exp( - gamma * ( - 2 * kk_test + dd_test + dd_train))
dim(k_star)
pred = k_star %*% hat_beta
mean((pred - Y_test)^2)
SS.total =  sum((Y_test - mean(Y_test))^2)
SS.residual = sum( (Y_test - pred)^2 )
1- SS.residual / SS.total
gamma = 4
myRBF.kernel <- exp(gamma*(-matrix(dd,N,N)-t(matrix(dd,N,N))+2*kk))
dim(myRBF.kernel)
lambda =0.1
alpha= solve(myRBF.kernel+ lambda * ident.N)
hat_beta = alpha %*% Y_train
X_test = data.matrix(test_data[,5:22])
Y_test = test_data[,4]
N_test = nrow(X_test)
dd_test = matrix( diag( tcrossprod(X_test) ), N_test, N)
dd_train = t( matrix( dd, N, N_test) )
kk_test = tcrossprod(X_test, X_train)
dim(kk_test)
k_star =  exp( - gamma * ( - 2 * kk_test + dd_test + dd_train))
dim(k_star)
pred = k_star %*% hat_beta
mean((pred - Y_test)^2)
SS.total =  sum((Y_test - mean(Y_test))^2)
SS.residual = sum( (Y_test - pred)^2 )
1- SS.residual / SS.total
gamma = 1/4
myRBF.kernel <- exp(gamma*(-matrix(dd,N,N)-t(matrix(dd,N,N))+2*kk))
dim(myRBF.kernel)
lambda =0.001
alpha= solve(myRBF.kernel+ lambda * ident.N)
hat_beta = alpha %*% Y_train
X_test = data.matrix(test_data[,5:22])
Y_test = test_data[,4]
N_test = nrow(X_test)
dd_test = matrix( diag( tcrossprod(X_test) ), N_test, N)
dd_train = t( matrix( dd, N, N_test) )
kk_test = tcrossprod(X_test, X_train)
dim(kk_test)
k_star =  exp( - gamma * ( - 2 * kk_test + dd_test + dd_train))
dim(k_star)
pred = k_star %*% hat_beta
mean((pred - Y_test)^2)
SS.total =  sum((Y_test - mean(Y_test))^2)
SS.residual = sum( (Y_test - pred)^2 )
1- SS.residual / SS.total
require(CVST)
Y = train_data$price
X = data.matrix(train_data[,5:22])
if (debug_flag) {
set.seed(0)
idx = sample(1:nrow(X), size= 3000)
#idx = 1:3000
}else idx = 1:nrow(X)
data_cvst_train = constructData(X[idx,], Y[idx])
dim(data_cvst_train$x)
gamma = 1/4
lambda = 0.1
krr = constructKRRLearner()
params = list(kernel="rbfdot", sigma=gamma, lambda=lambda)
X_test = data.matrix(test_data[,5:22])
Y_test = test_data$price
data_cvst_test =constructData(X_test, Y_test)
reg_model = krr$learn(data_cvst_train, params)
mean((pred - data_cvst_test$y)^2)
SS.total =  sum((Y_test - mean(Y_test))^2)
SS.residual = sum( (Y_test - pred)^2 )
pred = krr$predict(reg_model, data_cvst_test)
1- SS.residual / SS.total
debug_flag=TRUE
if (debug_flag) {
#idx = sample(1:nrow(train_data), size= 1000)
idx = 1:3000
}else idx = 1:nrow(train_data)
X_train = data.matrix(train_data[idx, 5:22])
Y_train = train_data[idx, 4]
train_size = 3000
require(CVST)
Y = train_data$price
X = data.matrix(train_data[,5:22])
if (debug_flag) {
set.seed(0)
idx = sample(1:nrow(X), size= train_size)
#idx = 1:3000
}else idx = 1:nrow(X)
data_cvst_train = constructData(X[idx,], Y[idx])
dim(data_cvst_train$x)
gamma = 1/4
lambda = 0.1
krr = constructKRRLearner()
params = list(kernel="rbfdot", sigma=gamma, lambda=lambda)
reg_model = krr$learn(data_cvst_train, params)
X_test = data.matrix(test_data[,5:22])
Y_test = test_data$price
data_cvst_test =constructData(X_test, Y_test)
pred = krr$predict(reg_model, data_cvst_test)
mean((pred - data_cvst_test$y)^2)
SS.total =  sum((Y_test - mean(Y_test))^2)
SS.residual = sum( (Y_test - pred)^2 )
1- SS.residual / SS.total
debug_flag=TRUE
if (debug_flag) {
set.seed(0)
idx = sample(1:nrow(train_data), size= train_size)
#idx = 1:3000
}else idx = 1:nrow(train_data)
X_train = data.matrix(train_data[idx, 5:22])
Y_train = train_data[idx, 4]
N <- nrow(X_train)
dd <- diag(kk)
ident.N <- diag(rep(1,N))
kk <- tcrossprod(X_train)
gamma = 1/4
myRBF.kernel <- exp(gamma*(-matrix(dd,N,N)-t(matrix(dd,N,N))+2*kk))
lambda =0.001
alpha= solve(myRBF.kernel+ lambda * ident.N)
dim(kk)
hat_beta = alpha %*% Y_train
X_test = data.matrix(test_data[,5:22])
dim(myRBF.kernel)
Y_test = test_data[,4]
N_test = nrow(X_test)
dd_test = matrix( diag( tcrossprod(X_test) ), N_test, N)
dd_train = t( matrix( dd, N, N_test) )
kk_test = tcrossprod(X_test, X_train)
dim(kk_test)
k_star =  exp( - gamma * ( - 2 * kk_test + dd_test + dd_train))
dim(k_star)
pred = k_star %*% hat_beta
mean((pred - Y_test)^2)
SS.total =  sum((Y_test - mean(Y_test))^2)
SS.residual = sum( (Y_test - pred)^2 )
1- SS.residual / SS.total
gamma = 1/4
myRBF.kernel <- exp(gamma*(-matrix(dd,N,N)-t(matrix(dd,N,N))+2*kk))
dim(myRBF.kernel)
lambda =0.1
alpha= solve(myRBF.kernel+ lambda * ident.N)
hat_beta = alpha %*% Y_train
X_test = data.matrix(test_data[,5:22])
Y_test = test_data[,4]
N_test = nrow(X_test)
dd_test = matrix( diag( tcrossprod(X_test) ), N_test, N)
dd_train = t( matrix( dd, N, N_test) )
kk_test = tcrossprod(X_test, X_train)
dim(kk_test)
k_star =  exp( - gamma * ( - 2 * kk_test + dd_test + dd_train))
dim(k_star)
pred = k_star %*% hat_beta
mean((pred - Y_test)^2)
SS.total =  sum((Y_test - mean(Y_test))^2)
SS.residual = sum( (Y_test - pred)^2 )
1- SS.residual / SS.total
debug_flag=TRUE
if (debug_flag) {
set.seed(0)
idx = sample(1:nrow(train_data), size= train_size)
#idx = 1:3000
}else idx = 1:nrow(train_data)
X_train = data.matrix(train_data[idx, 5:22])
Y_train = train_data[idx, 4]
N <- nrow(X_train)
kk <- tcrossprod(X_train)
dd <- diag(kk)
ident.N <- diag(rep(1,N))
dim(kk)
gamma = 1/4
View(k_star)
View(k_star)
setwd("D:/Princeton_3rd/teaching_ORF525/hw/hw1/hw1_solution/code")
filename <- 'train.data.csv'
train_data <- read.csv(filename, header=TRUE)
filename <- 'test.data.csv'
test_data <- read.csv(filename, header=TRUE)
str(train_data)
train_data$zipcode <- as.factor(train_data$zipcode)
test_data$zipcode <- as.factor(test_data$zipcode)
debug_flag = TRUE
train_size = 3000
require(CVST)
Y = train_data$price
debug_flag=TRUE
if (debug_flag) {
set.seed(0)
idx = sample(1:nrow(train_data), size= train_size)
#idx = 1:3000
}else idx = 1:nrow(train_data)
X_train = data.matrix(train_data[idx, 5:22])
Y_train = train_data[idx, 4]
N <- nrow(X_train)
kk <- tcrossprod(X_train)
dd <- diag(kk)
ident.N <- diag(rep(1,N))
dim(kk)
gamma = 1/4
myRBF.kernel <- exp(gamma*(-matrix(dd,N,N)-t(matrix(dd,N,N))+2*kk))
dim(myRBF.kernel)
lambda =0.1
alpha= solve(myRBF.kernel+ lambda * ident.N)
hat_beta = alpha %*% Y_train
X_test = data.matrix(test_data[,5:22])
Y_test = test_data[,4]
N_test = nrow(X_test)
dd_test = matrix( diag( tcrossprod(X_test) ), N_test, N)
dd_train = t( matrix( dd, N, N_test) )
kk_test = tcrossprod(X_test, X_train)
dim(kk_test)
dim(k_star)
k_star =  exp( - gamma * ( - 2 * kk_test + dd_test + dd_train))
k_star =  exp( - gamma * ( - 2 * kk_test + dd_test + dd_train))
dim(k_star)
pred = k_star %*% hat_beta
mean((pred - Y_test)^2)
SS.total =  sum((Y_test - mean(Y_test))^2)
SS.residual = sum( (Y_test - pred)^2 )
1- SS.residual / SS.total
require(CVST)
Y = train_data$price
X = data.matrix(train_data[,5:22])
if (debug_flag) {
set.seed(0)
idx = sample(1:nrow(X), size= train_size)
#idx = 1:3000
}else idx = 1:nrow(X)
data_cvst_train = constructData(X[idx,], Y[idx])
dim(data_cvst_train$x)
gamma = 1/4
lambda = 0.1
krr = constructKRRLearner()
params = list(kernel="rbfdot", sigma=gamma, lambda=lambda)
reg_model = krr$learn(data_cvst_train, params)
X_test = data.matrix(test_data[,5:22])
Y_test = test_data$price
data_cvst_test =constructData(X_test, Y_test)
variable_list = c(5:22)
setwd("D:/Princeton_3rd/teaching_ORF525/hw/hw1/hw1_solution/code")
filename <- 'train.data.csv'
train_data <- read.csv(filename, header=TRUE)
filename <- 'test.data.csv'
test_data <- read.csv(filename, header=TRUE)
str(train_data)
train_data$zipcode <- as.factor(train_data$zipcode)
test_data$zipcode <- as.factor(test_data$zipcode)
train_size = 3000
debug_flag = TRUE
variable_list = c('bathrooms', 'bedrooms', 'sqft_living', 'sqft_lot')
require(CVST)
Y = train_data$price
X = data.matrix(train_data[,variable_list])
if (debug_flag) {
set.seed(0)
idx = sample(1:nrow(X), size= train_size)
#idx = 1:3000
}else idx = 1:nrow(X)
data_cvst_train = constructData(X[idx,], Y[idx])
dim(data_cvst_train$x)
gamma = 1/4
krr = constructKRRLearner()
params = list(kernel="rbfdot", sigma=gamma, lambda=lambda)
lambda = 0.1
X_test = data.matrix(test_data[,variable_list])
reg_model = krr$learn(data_cvst_train, params)
data_cvst_test =constructData(X_test, Y_test)
mean((pred - data_cvst_test$y)^2)
Y_test = test_data$price
pred = krr$predict(reg_model, data_cvst_test)
SS.total =  sum((Y_test - mean(Y_test))^2)
SS.residual = sum( (Y_test - pred)^2 )
1- SS.residual / SS.total
debug_flag=TRUE
if (debug_flag) {
set.seed(0)
idx = sample(1:nrow(train_data), size= train_size)
#idx = 1:3000
}else idx = 1:nrow(train_data)
X_train = data.matrix(train_data[idx, variable_list])
Y_train = train_data[idx, 4]
N <- nrow(X_train)
kk <- tcrossprod(X_train)
dd <- diag(kk)
dim(kk)
gamma = 1/4
myRBF.kernel <- exp(gamma*(-matrix(dd,N,N)-t(matrix(dd,N,N))+2*kk))
lambda =0.1
ident.N <- diag(rep(1,N))
hat_beta = alpha %*% Y_train
X_test = data.matrix(test_data[,variable_list])
Y_test = test_data$price
N_test = nrow(X_test)
dim(myRBF.kernel)
dd_train = t( matrix( dd, N, N_test) )
kk_test = tcrossprod(X_test, X_train)
dim(kk_test)
k_star =  exp( - gamma * ( - 2 * kk_test + dd_test + dd_train))
dim(k_star)
alpha= solve(myRBF.kernel+ lambda * ident.N)
pred = k_star %*% hat_beta
mean((pred - Y_test)^2)
SS.total =  sum((Y_test - mean(Y_test))^2)
SS.residual = sum( (Y_test - pred)^2 )
dd_test = matrix( diag( tcrossprod(X_test) ), N_test, N)
1- SS.residual / SS.total
debug_flag = FALSE
require(CVST)
Y = train_data$price
X = data.matrix(train_data[,variable_list])
if (debug_flag) {
set.seed(0)
idx = sample(1:nrow(X), size= train_size)
#idx = 1:3000
}else idx = 1:nrow(X)
data_cvst_train = constructData(X[idx,], Y[idx])
dim(data_cvst_train$x)
lambda = 0.1
gamma = 1/4
params = list(kernel="rbfdot", sigma=gamma, lambda=lambda)
krr = constructKRRLearner()
reg_model = krr$learn(data_cvst_train, params)
X_test = data.matrix(test_data[,variable_list])
Y_test = test_data$price
data_cvst_test =constructData(X_test, Y_test)
pred = krr$predict(reg_model, data_cvst_test)
mean((pred - data_cvst_test$y)^2)
SS.total =  sum((Y_test - mean(Y_test))^2)
SS.residual = sum( (Y_test - pred)^2 )
1- SS.residual / SS.total
setwd("D:/Princeton_3rd/teaching_ORF525/hw/hw1/hw1_solution/code")
filename <- 'train.data.csv'
train_data <- read.csv(filename, header=TRUE)
filename <- 'test.data.csv'
test_data <- read.csv(filename, header=TRUE)
str(train_data)
train_data$zipcode <- as.factor(train_data$zipcode)
test_data$zipcode <- as.factor(test_data$zipcode)
debug_flag = TRUE
train_size = 3000
variable_list = c('bathrooms', 'bedrooms', 'sqft_living', 'sqft_lot')
Y = train_data$price
X = data.matrix(train_data[,variable_list])
if (debug_flag) {
set.seed(0)
idx = sample(1:nrow(X), size= train_size)
#idx = 1:3000
}else idx = 1:nrow(X)
data_cvst_train = constructData(X[idx,], Y[idx])
dim(data_cvst_train$x)
require(CVST)
lambda = 0.1
krr = constructKRRLearner()
gamma = 1/4
params = list(kernel="rbfdot", sigma=gamma, lambda=lambda)
reg_model = krr$learn(data_cvst_train, params)
X_test = data.matrix(test_data[,variable_list])
Y_test = test_data$price
data_cvst_test =constructData(X_test, Y_test)
pred = krr$predict(reg_model, data_cvst_test)
mean((pred - data_cvst_test$y)^2)
SS.total =  sum((Y_test - mean(Y_test))^2)
require(CVST)
Y = train_data$price
X = data.matrix(train_data[,variable_list])
if (debug_flag) {
set.seed(0)
idx = sample(1:nrow(X), size= train_size)
#idx = 1:3000
}else idx = 1:nrow(X)
data_cvst_train = constructData(X[idx,], Y[idx])
dim(data_cvst_train$x)
gamma = 1/4
lambda = 0.001
krr = constructKRRLearner()
params = list(kernel="rbfdot", sigma=gamma, lambda=lambda)
reg_model = krr$learn(data_cvst_train, params)
X_test = data.matrix(test_data[,variable_list])
Y_test = test_data$price
data_cvst_test =constructData(X_test, Y_test)
pred = krr$predict(reg_model, data_cvst_test)
mean((pred - data_cvst_test$y)^2)
SS.total =  sum((Y_test - mean(Y_test))^2)
SS.residual = sum( (Y_test - pred)^2 )
1- SS.residual / SS.total
gamma = 1/4
lambda = 100
krr = constructKRRLearner()
params = list(kernel="rbfdot", sigma=gamma, lambda=lambda)
reg_model = krr$learn(data_cvst_train, params)
X_test = data.matrix(test_data[,variable_list])
Y_test = test_data$price
data_cvst_test =constructData(X_test, Y_test)
pred = krr$predict(reg_model, data_cvst_test)
mean((pred - data_cvst_test$y)^2)
SS.total =  sum((Y_test - mean(Y_test))^2)
SS.residual = sum( (Y_test - pred)^2 )
1- SS.residual / SS.total
setwd("D:/Princeton_3rd/teaching_ORF525/hw/hw1/hw1_solution/code")
filename <- 'train.data.csv'
train_data <- read.csv(filename, header=TRUE)
filename <- 'test.data.csv'
test_data <- read.csv(filename, header=TRUE)
str(train_data)
train_data$zipcode <- as.factor(train_data$zipcode)
test_data$zipcode <- as.factor(test_data$zipcode)
debug_flag = TRUE
train_size = 3000
variable_list = c('bathrooms', 'bedrooms', 'sqft_living', 'sqft_lot')
require(CVST)
Y = train_data$price
X = data.matrix(train_data[,variable_list])
if (debug_flag) {
set.seed(0)
idx = sample(1:nrow(X), size= train_size)
#idx = 1:3000
}else idx = 1:nrow(X)
data_cvst_train = constructData(X[idx,], Y[idx])
dim(data_cvst_train$x)
gamma = 1e-9
lambda = 0.1
krr = constructKRRLearner()
params = list(kernel="rbfdot", sigma=gamma, lambda=lambda)
reg_model = krr$learn(data_cvst_train, params)
X_test = data.matrix(test_data[,variable_list])
Y_test = test_data$price
data_cvst_test =constructData(X_test, Y_test)
pred = krr$predict(reg_model, data_cvst_test)
mean((pred - data_cvst_test$y)^2)
SS.total =  sum((Y_test - mean(Y_test))^2)
SS.residual = sum( (Y_test - pred)^2 )
1- SS.residual / SS.total
if (debug_flag) {
set.seed(0)
idx = sample(1:nrow(train_data), size= train_size)
#idx = 1:3000
}else idx = 1:nrow(train_data)
